image: node:18

definitions:
  services:
    docker:
      memory: 2048 # Increasing Docker Memory Size to 2GB instead of defailt 1GB
  steps:

    # DEFINE Lint Step
    - step: &lint
        name: "Lint"

        caches:
          - node
        script:
          - echo "Installing"
          - yarn install
          - echo "Linting"
          - yarn run lint

    # DEFINE Test Step
    - step: &test
        name: "Test"

        caches:
          - node
        script:
          - echo "Installing"
          - yarn install
          - echo "Testing"
          - yarn run test
        artifacts:
          # keep all files from this build step and make available for next step
          - node_modules/**

    # DEFINE Code Analysis
    - step: &analyze
        name: Code Analysis
        caches:
          - node
          - sonar
        script:
          # Increase Node Memory Size to 2GB instead of default 512MB
          - export NODE_OPTIONS=--max_old_space_size=2048
          - yarn install
          - yarn run coverage
          - pipe: sonarsource/sonarcloud-scan:1.2.1
            variables:
            EXTRA_ARGS: "-Dsonar.sources=src -Dsonar.tests=src -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info"

    # DEFINE Code Quality Gate
    - step: &quality-gate
        name: Code Quality Enforcement
        script:
          - pipe: sonarsource/sonarcloud-quality-gate:0.1.3
          # If the quality requirements aren't passed as defined in Sonar, Build will Fail

    # DEFINE Build Step
    - step: &build-app
        name: "Build App"

        caches:
          - node
        script:
          - echo "Building App"
          - yarn install
          - yarn run build
        artifacts:
          # keep all files from this build step and make available for next step
          - dist/**
          - node_modules/**

    # DEFINE RELEASE and bump VERSION 
    - step: &release
        name: "Release and bump version"
        caches:
          - node
        script:
          # Run Test
          #- npm run test
          # Do Release w/ debug on
          - npx semantic-release@19
        artifacts: # defining the artifacts to be passed to each future step.
          - CHANGELOG.md
          - package.json

    # DEFINE upload Step
    - step: &upload-image
        name: "Upload Docker image"

        caches:
          - node
        script:
          - echo "Declare Package VERSION"
          - apt-get update
          - apt-get install jq -y
          - declare -x VERSION=$(jq -r '.version' package.json)
          - echo "$VERSION"
          - echo "Creating docker image"
          - docker build -f Dockerfile.prod ./ -t $AWS_ECR_REPOSITORY
          - pipe: "atlassian/aws-ecr-push-image:1.1.0"
            variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                IMAGE_NAME: $AWS_ECR_REPOSITORY
                TAGS: $VERSION

    # DEFINE Build Step
    - step: &deploy-docker
        name: "Deploy Docker image"

        caches:
          - node
        script:
          - echo "Deploying to EC2"
          - pipe: "atlassian/ssh-run:0.2.4"
            variables:
                SSH_USER: ubuntu
                SERVER: $SERVER_IP
                SSH_KEY: $SSH_KEY
                MODE: script
                COMMAND: deployment.sh

    # DEFINE Update Docs to Confluence Step
    - step: &docs
        name: "README to Confluence"
        script:
          - set -ex && apt-get update && apt-get install -y ca-certificates gcc musl-dev git mercurial zip curl
          - echo "Updating Readme.md to Confluence Documentation"
          - curl -LO https://github.com/justmiles/go-markdown2confluence/releases/download/v3.0.2/markdown2confluence_3.0.2_linux_x86_64.tar.gz
          - tar -xzvf markdown2confluence_3.0.2_linux_x86_64.tar.gz -C /usr/local/bin/ markdown2confluence
          - markdown2confluence -u $CONFLUENCE_USER -p $CONFLUENCE_PASSWORD -e $CONFLUENCE_ENDPOINT -s 'ARCH' --parent 'Repositories' -t 'alkemi-earn-api' -d README.md

pipelines:

  branches:
    development:
      # Runs only on development Branch
      - parallel:
          - step: *lint
          #- step: *test
          #- step: *analyze
          #- step: *github
      - step: *build-app
      - step: *release
    master:
      # Runs only on Master Branch
      - parallel:
          - step: *lint
          #- step: *test
          #- step: *analyze
          #- step: *github
      - step: *build-app
      - step: *upload-image
